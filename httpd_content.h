// Generated with clasptree
// To use this file, define HTTPD_CONTENT_IMPLEMENTATION in exactly one translation unit (.c/.cpp file) before including this header.
#ifndef HTTPD_CONTENT_H
#define HTTPD_CONTENT_H

#include <stdint.h>
#include <stddef.h>

#define HTTPD_RESPONSE_HANDLER_COUNT 7
typedef struct { const char* path; const char* path_encoded; void (* handler) (void* arg); } httpd_response_handler_t;
extern httpd_response_handler_t httpd_response_handlers[HTTPD_RESPONSE_HANDLER_COUNT];
#ifdef __cplusplus
extern "C" {
#endif

// ..404.clasp
void httpd_content_404_clasp(void* response_state);
// .api/index.clasp
void httpd_content_api_index_clasp(void* response_state);
// .api v2/index.clasp
void httpd_content_api_v2_index_clasp(void* response_state);
// .images/espmon.png
void httpd_content_images_espmon_png(void* response_state);
/// @brief Matches a path to one of the response handler entries
/// @param path_and_query The path to match which can include the query string (ignored)
/// @return The index of the response handler entry, or -1 if no match
int httpd_response_handler_match(const char* path_and_query);

#ifdef __cplusplus
}
#endif

#endif // HTTPD_CONTENT_H

#ifdef HTTPD_CONTENT_IMPLEMENTATION

#include "httpd_application.h"

httpd_response_handler_t httpd_response_handlers[7] = {
    { "/api", "/api", httpd_content_api_index_clasp },
    { "/api v2", "/api%20v2", httpd_content_api_v2_index_clasp },
    { "/api v2/", "/api%20v2/", httpd_content_api_v2_index_clasp },
    { "/api v2/index.clasp", "/api%20v2/index.clasp", content_api_v2_index_clasp },
    { "/api/", "/api/", httpd_content_api_index_clasp },
    { "/api/index.clasp", "/api/index.clasp", content_api_index_clasp },
    { "/images/espmon.png", "/images/espmon.png", content_images_espmon_png }
};
// matches a path to a response handler index

int httpd_response_handler_match(const char* path_and_query) {
    static const int16_t fsm_data[] = {
        -1, 1, 5, 1, 47, -1, 2, 13, 1, 97, 170, 1, 105, -1, 1, 18, 1, 112, -1, 1, 
        23, 1, 105, 0, 2, 31, 1, 37, 113, 1, 47, -1, 1, 36, 1, 50, -1, 1, 41, 1, 
        48, -1, 1, 46, 1, 118, -1, 1, 51, 1, 50, 1, 1, 56, 1, 47, 2, 1, 61, 1, 
        105, -1, 1, 66, 1, 110, -1, 1, 71, 1, 100, -1, 1, 76, 1, 101, -1, 1, 81, 1, 
        120, -1, 1, 86, 1, 46, -1, 1, 91, 1, 99, -1, 1, 96, 1, 108, -1, 1, 101, 1, 
        97, -1, 1, 106, 1, 115, -1, 1, 111, 1, 112, 3, 0, 4, 1, 118, 1, 105, -1, 1, 
        123, 1, 110, -1, 1, 128, 1, 100, -1, 1, 133, 1, 101, -1, 1, 138, 1, 120, -1, 1, 
        143, 1, 46, -1, 1, 148, 1, 99, -1, 1, 153, 1, 108, -1, 1, 158, 1, 97, -1, 1, 
        163, 1, 115, -1, 1, 168, 1, 112, 5, 0, -1, 1, 175, 1, 109, -1, 1, 180, 1, 97, 
        -1, 1, 185, 1, 103, -1, 1, 190, 1, 101, -1, 1, 195, 1, 115, -1, 1, 200, 1, 47, 
        -1, 1, 205, 1, 101, -1, 1, 210, 1, 115, -1, 1, 215, 1, 112, -1, 1, 220, 1, 109, 
        -1, 1, 225, 1, 111, -1, 1, 230, 1, 110, -1, 1, 235, 1, 46, -1, 1, 240, 1, 112, 
        -1, 1, 245, 1, 110, -1, 1, 250, 1, 103, 6, 0 };
    
    int adv = 0;
    int tlen;
    int16_t tto;
    int16_t prlen;
    int16_t pcmp;
    int i, j;
    int ch;
    int16_t state = 0;
    int16_t acc = -1;
    bool done;
    bool result;
    ch = (path_and_query[adv]=='\0'||path_and_query[adv]=='?') ? -1 : path_and_query[adv++];
    while (ch != -1) {
    	result = false;
    	acc = -1;
    	done = false;
    	while (!done) {
    	start_dfa:
    		done = true;
    		acc = fsm_data[state++];
    		tlen = fsm_data[state++];
    		for (i = 0; i < tlen; ++i) {
    			tto = fsm_data[state++];
    			prlen = fsm_data[state++];
    			for (j = 0; j < prlen; ++j) {
    				pcmp = fsm_data[state++];
    				if (ch < pcmp) {
    					state += (prlen - (j + 1));
    					break;
    				}
    				if (ch == pcmp) {
    					result = true;
    					ch = (path_and_query[adv] == '\0' || path_and_query[adv] == '?') ? -1 : path_and_query[adv++];
    					state = tto;
    					done = false;
    					goto start_dfa;
    				}
    			}
    		}
    		if (acc != -1 && result) {
    			if (path_and_query[adv]=='\0' || path_and_query[adv]=='?') {
    				return (int)acc;
    			}
    			return -1;
    		}
    		ch = (path_and_query[adv] == '\0' || path_and_query[adv] == '?') ? -1 : path_and_query[adv++];
    		state = 0;
    	}
    }
    return -1;
    
}
void httpd_content_404_clasp(void* response_state) {
    // HTTP/1.1 404 Not found
    // Content-Type: text/html
    // Content-Encoding: deflate
    // Content-Length: 260
    // 
    static const unsigned char http_response_data[] = {
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x34, 0x30, 0x34, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 
        0x6e, 0x64, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 
        0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x45, 0x6e, 0x63, 
        0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 
        0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x36, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x5d, 
        0x90, 0x31, 0x6f, 0xc3, 0x20, 0x10, 0x85, 0xf7, 0xfe, 0x8a, 0x2b, 0x92, 0xb7, 0xda, 0x24, 0x52, 0x46, 0xb0, 0x22, 0xa5, 
        0x5d, 0xdb, 0x0e, 0x5e, 0x3a, 0x12, 0xb8, 0xc4, 0x44, 0xd8, 0x58, 0x70, 0x76, 0x9a, 0x7f, 0x5f, 0x6c, 0xaa, 0xc6, 0x29, 
        0x0b, 0xdc, 0xd3, 0xdd, 0x7b, 0xdf, 0x21, 0x8a, 0x7d, 0x24, 0x45, 0x63, 0x04, 0xed, 0x0d, 0x4a, 0xb6, 0xdb, 0xec, 0x18, 
        0x10, 0x7e, 0x93, 0x64, 0xef, 0x9e, 0xe0, 0xe4, 0xc7, 0xde, 0x30, 0x28, 0xea, 0x27, 0x51, 0xec, 0x5b, 0x54, 0x06, 0x03, 
        0xf4, 0xaa, 0x4b, 0x8d, 0x07, 0xdf, 0x13, 0xf6, 0x54, 0x36, 0xb7, 0x01, 0x19, 0x4c, 0xca, 0x8d, 0x49, 0x9c, 0x07, 0x79, 
        0x4b, 0x9d, 0x63, 0x45, 0x2d, 0x9e, 0x5f, 0x3f, 0x0e, 0xcd, 0xd7, 0xe7, 0x1b, 0xcc, 0x42, 0x32, 0xc8, 0x17, 0xa4, 0x23, 
        0x66, 0xa7, 0xfc, 0x5c, 0xca, 0x0e, 0x49, 0xfd, 0xda, 0x4e, 0x16, 0xaf, 0x83, 0x0f, 0xc4, 0x12, 0xcf, 0x12, 0x20, 0xd9, 
        0xd5, 0x1a, 0x6a, 0xa5, 0xc1, 0xc9, 0x6a, 0x2c, 0x97, 0xe2, 0x05, 0x6c, 0x6f, 0xc9, 0x2a, 0x57, 0x46, 0xad, 0x1c, 0xca, 
        0x6d, 0xb5, 0x61, 0xc0, 0x57, 0x86, 0x64, 0xc9, 0x61, 0x9d, 0x76, 0x81, 0xbf, 0x25, 0x04, 0xcf, 0x62, 0x06, 0xe0, 0x77, 
        0x02, 0x71, 0xf4, 0xe6, 0xb6, 0x9a, 0xd5, 0x29, 0x14, 0xc3, 0x5d, 0xc8, 0xc0, 0xdb, 0xff, 0x6e, 0x49, 0x79, 0x6c, 0xb1, 
        0xdd, 0x19, 0x62, 0xd0, 0x92, 0x71, 0xdb, 0xa9, 0x33, 0x46, 0x9e, 0x06, 0xaa, 0xcb, 0x70, 0x7e, 0x20, 0x5b, 0x3a, 0x87, 
        0xba, 0x69, 0x11, 0xe2, 0x80, 0xda, 0x9e, 0x2c, 0x1a, 0x08, 0x18, 0xfd, 0x18, 0x34, 0xa6, 0x95, 0x47, 0x67, 0xa0, 0x4f, 
        0x21, 0x47, 0xcc, 0x39, 0x95, 0xe0, 0xc3, 0x8a, 0x8d, 0xaf, 0xe1, 0x04, 0xcf, 0xe4, 0x62, 0xf9, 0xf1, 0xfa, 0x07 };
     response_block((const char*)http_response_data,sizeof(http_response_data),  response_state);
    
}
void httpd_content_api_index_clasp(void* response_state) {
     response_block ("HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nTransfer-Encodin"
        "g: chunked\r\n\r\n1\r\n[\r\n", 85,  response_state);
    
    for(size_t i = 0;i<alarm_count;++i) {
        alarm_lock();
        bool b=alarm_values[i];
        alarm_unlock();
        if(i==0) {
            if(b) {
                
     response_block("4\r\ntrue\r\n", 9,  response_state);
    
            } else {
                
     response_block("5\r\nfalse\r\n", 10,  response_state);
    
            }
        } else {
            if(b) {
                
     response_block("5\r\n,true\r\n", 10,  response_state);
    
            } else {
                
     response_block("6\r\n,false\r\n", 11,  response_state);
    
            }
        }
    }
     response_block("1\r\n]\r\n", 6,  response_state);
    
}
void httpd_content_api_v2_index_clasp(void* response_state) {
     response_block ("HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nTransfer-Encodin"
        "g: chunked\r\n\r\n1\r\n[\r\n", 85,  response_state);
    
    for(size_t i = 0;i<alarm_count;++i) {
        alarm_lock();
        bool b=alarm_values[i];
        alarm_unlock();
        if(i==0) {
            if(b) {
                
     response_block("4\r\ntrue\r\n", 9,  response_state);
    
            } else {
                
     response_block("5\r\nfalse\r\n", 10,  response_state);
    
            }
        } else {
            if(b) {
                
     response_block("5\r\n,true\r\n", 10,  response_state);
    
            } else {
                
     response_block("6\r\n,false\r\n", 11,  response_state);
    
            }
        }
    }
     response_block("1\r\n]\r\n", 6,  response_state);
    
}
void httpd_content_images_espmon_png(void* response_state) {
    // HTTP/1.1 200  OK
    // Content-Type: image/png
    // Content-Encoding: deflate
    // Content-Length: 304
    // 
    static const unsigned char http_response_data[] = {
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x43, 0x6f, 
        0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x6e, 
        0x67, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 
        0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 
        0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x33, 0x30, 0x34, 0x0d, 0x0a, 0x0d, 0x0a, 0xeb, 0x0c, 0xf0, 0x73, 0xe7, 0xe5, 0x92, 
        0xe2, 0x62, 0x60, 0x60, 0xe0, 0xf5, 0xf4, 0x70, 0x09, 0x02, 0xd2, 0x0a, 0x20, 0xcc, 0xc1, 0x06, 0x24, 0x8b, 0xab, 0xaa, 
        0xbe, 0x00, 0x29, 0xc6, 0xe2, 0x20, 0x77, 0x27, 0x86, 0x75, 0xe7, 0x64, 0x5e, 0x02, 0x39, 0x2c, 0xe9, 0x8e, 0xbe, 0x8e, 
        0x0c, 0x0c, 0x1b, 0xfb, 0xb9, 0xff, 0x24, 0xb2, 0x02, 0xf9, 0x9c, 0x05, 0x1e, 0x91, 0xc5, 0x0c, 0x0c, 0x7c, 0x87, 0x41, 
        0x98, 0xf1, 0x78, 0xfe, 0x8a, 0x14, 0xa0, 0xe0, 0x0d, 0x4f, 0x17, 0xc7, 0x90, 0x08, 0xf7, 0xb3, 0x7d, 0x8e, 0x5c, 0x87, 
        0x0d, 0x04, 0x98, 0x3f, 0x4f, 0xdb, 0xb7, 0x7c, 0xfe, 0x5b, 0xee, 0xe0, 0x9d, 0x09, 0x11, 0x2b, 0x8b, 0xb2, 0xac, 0x2b, 
        0xee, 0x36, 0x5a, 0xa6, 0x1c, 0xb8, 0x28, 0xf7, 0xe0, 0xce, 0x9a, 0xde, 0x99, 0xb7, 0x66, 0xac, 0xec, 0x9d, 0x59, 0x14, 
        0xd1, 0xfb, 0xce, 0x91, 0x6f, 0xf5, 0x45, 0xdb, 0x13, 0x89, 0xa6, 0xbb, 0xd8, 0x2d, 0xb7, 0x54, 0xec, 0x99, 0x27, 0xff, 
        0x7e, 0x51, 0xf5, 0x04, 0xe7, 0xee, 0xaa, 0x03, 0x77, 0x95, 0x4b, 0xf8, 0x8b, 0x0a, 0x8e, 0x7c, 0xdc, 0x6f, 0xf1, 0xe0, 
        0x9c, 0x20, 0x50, 0x52, 0x23, 0x6f, 0x8f, 0x45, 0x37, 0x50, 0x75, 0x97, 0xf4, 0xfa, 0x73, 0x0b, 0xaa, 0x27, 0x34, 0x2f, 
        0x6a, 0xfe, 0x65, 0xdb, 0x05, 0xe4, 0x17, 0x2a, 0x44, 0xbd, 0x7c, 0xab, 0x5b, 0x0a, 0x54, 0xdb, 0xdf, 0x25, 0x78, 0x3d, 
        0x79, 0x77, 0xd0, 0x77, 0x05, 0xf6, 0xef, 0x2b, 0x24, 0x0a, 0x6d, 0xb7, 0x69, 0x03, 0x05, 0x5f, 0x28, 0xfe, 0xdb, 0xb0, 
        0xe8, 0xbe, 0x2e, 0xd0, 0xa8, 0x17, 0xae, 0xfd, 0x37, 0xaa, 0x1c, 0xbe, 0x88, 0x03, 0x8d, 0xea, 0x31, 0xb0, 0x8a, 0xbb, 
        0x00, 0xb4, 0xb3, 0xe5, 0x2d, 0xbb, 0x88, 0xdb, 0x31, 0x6e, 0xa0, 0xc8, 0x99, 0x0d, 0x7f, 0x1b, 0x04, 0x81, 0x8a, 0x60, 
        0xee, 0xf9, 0x21, 0xba, 0x69, 0xab, 0x61, 0xb0, 0xb4, 0x31, 0x88, 0x98, 0x6c, 0x73, 0xce, 0xfc, 0xcf, 0xd4, 0x89, 0x7b, 
        0xf4, 0x24, 0x58, 0xab, 0x81, 0x7e, 0x64, 0xf0, 0x74, 0xf5, 0x73, 0x59, 0xe7, 0x94, 0xd0, 0x04, 0x00 };
     response_block((const char*)http_response_data,sizeof(http_response_data),  response_state);
    
}
#endif // HTTPD_CONTENT_IMPLEMENTATION

